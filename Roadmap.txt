1. Introduction to Data Structures
    Definition: What are data structures? Why are they important?
    Types of Data Structures: Overview of primitive vs. non-primitive data structures.
    Complexity Analysis: Basic understanding of time and space complexity.

2. Basic Data Structures
    Arrays
    Single-dimensional arrays
    Multi-dimensional arrays
    Operations: Access, insertion, deletion, traversal
    Linked Lists    
    Singly linked list
    Doubly linked list
    Circular linked list
    Operations: Insertion, deletion, traversal

3.Stacks and Queues
    Stacks
        Concept and applications
        Implementation using arrays and linked lists
        Operations: Push, pop, peek, isEmpty
    Queues  
        Concept and applications
        Types: Simple Queue, Circular Queue, Deque (Double-ended Queue)
        Implementation using arrays and linked lists
        Operations: Enqueue, dequeue, front, rear, isEmpty

4. Trees
    Basic Trees
        Terminology: Node, root, leaf, depth, height
        Binary Trees
        Binary Search Trees (BST)
    Advanced Trees
        AVL Trees (Self-balancing BST)
        Red-Black Trees
        B-Trees and B+ Trees
        Trie Trees


5. Graphs
    Basic Concepts
        Terminology: Vertex, edge, degree, path, cycle
        Representations: Adjacency Matrix, Adjacency List
    Graph Traversal Algorithms
        Depth-First Search (DFS)
        Breadth-First Search (BFS)
    Shortest Path Algorithms
        Dijkstra’s Algorithm
        Bellman-Ford Algorithm
        Floyd-Warshall Algorithm
    Minimum Spanning Tree Algorithms
        Kruskal’s Algorithm
        Prim’s Algorithm

6. Hashing
    Concepts
        Hash Tables
        Hash Functions
        Collision Resolution Techniques: Chaining, Open Addressing (Linear Probing, Quadratic Probing, Double Hashing)


7. Heaps
    Binary Heaps
        Min-Heap
        Max-Heap
    Heap Operations
        Insertion
        Deletion (Extract Min/Max)
        Heapify
    Heap Sort Algorithm
